<?php

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserDao class instead!
 */

namespace Mouf\Security\DAO;

use Kls\Model\Bean\RolesRightBean;
use Mouf\Database\TDBM\TDBMService;
use Mouf\Database\TDBM\ResultIterator;
use Mouf\Security\Model\Role;
use Mouf\Security\Rights\RightsRegistry;
use Mouf\Security\RightsService\RightInterface;
use Mouf\Security\RightsService\RightsDaoInterface;
use Mouf\Security\UserManagement\Api\RoleDao;
use Mouf\Security\UserManagement\Api\RoleInterface;
use Mouf\Security\UserManagement\Api\RoleListDao;
use Mouf\Security\UserService\UserDaoInterface;
use Mouf\Security\UserService\UserInterface;
use Porpaginas\Result;

/**
 * This class provides a TDBM implementation of the RoleDao interface.
 */
class SecurityRoleDao implements RoleDao, RoleListDao
{
    /**
     * @var TDBMService
     */
    protected $tdbmService;

    /**
     * @param TDBMService    $tdbmService    Sets the TDBM service used by this DAO.
     */
    public function __construct(TDBMService $tdbmService)
    {
        $this->tdbmService = $tdbmService;
    }


    /**
     * Returns the list of all roles known by the application.
     *
     * @return RoleInterface[]
     */
    public function getAllRoles()
    {
        return $this->find();
    }

    /**
     * @param UserInterface $user
     * @param RoleInterface[] $roles
     * @return void
     */
    public function setRoles(UserInterface $user, array $roles)
    {
        $user = $this->tdbmService->findObjectByPk('users', [
            'id' => $user->getId()
        ]);
        // FIXME: throw exception is $user is null

        $roleBeans = [];

        foreach ($roles as $role) {
            $roleBeans[] = $this->findRoleById($role->getId());
        }

        $user->setRoles($roleBeans);
        $this->tdbmService->save($user);
    }

    /**
     * @param UserInterface $user
     * @return RoleInterface[]
     */
    public function getRoles(UserInterface $user)
    {
        if ($user->getId() === null) {
            return [];
        }
        return $this->find([
            'users_roles.user_id' => $user->getId()
        ]);
    }

    /**
     * Get a list of RolesBean specified by its filters.
     *
     * @param mixed $filter                The filter bag (see TDBMService::findObjects for complete description)
     * @param array $parameters            The parameters associated with the filter
     * @param mixed $orderBy               The order string
     * @param array $additionalTablesFetch A list of additional tables to fetch (for performance improvement)
     * @param int   $mode                  Either TDBMService::MODE_ARRAY or TDBMService::MODE_CURSOR (for large datasets). Defaults to TDBMService::MODE_ARRAY.
     *
     * @return RolesRightBean[]|ResultIterator|ResultArray
     */
    private function find($filter = null, array $parameters = [], $orderBy = null, array $additionalTablesFetch = [], $mode = null)
    {
        return $this->tdbmService->findObjects('roles', $filter, $parameters, $orderBy, $additionalTablesFetch, $mode);
    }

    private function findRoleById($roleId) {
        return $this->tdbmService->findObjectByPk('roles', [
            'id' => $roleId
        ]);
    }

    /**
     * Fetches a role by ID.
     *
     * @param $roleId
     * @return RoleInterface
     */
    public function getRoleById($roleId) : RoleInterface
    {
        return self::castToRole($this->findRoleById($roleId));
    }

    public static function castToRole($roleBean) : RoleInterface
    {
        return new Role($roleBean->getId(), $roleBean->getLabel());
    }

    /**
     * Returns a list of users, as a Porpaginas result.
     * This list can be filtered based on the $filters array, that can be really anything based on the filters you implement.
     *
     * @param array $filters
     * @param $orderBy
     * @param $direction
     * @return Result
     */
    public function search(array $filters, $orderBy, $direction) : Result
    {
        if ($orderBy) {
            if (!in_array($orderBy, ['id', 'label'])) {
                throw new InvalidArgumentException('Invalid order by criterion');
            }
        }
        if ($direction) {
            if (!in_array($direction, ['asc', 'desc'])) {
                throw new InvalidArgumentException('Invalid direction');
            }
        }

        $sql = null;
        $parameters = [];
        if (isset($filters['q'])) {
            $sql = 'label LIKE :label';
            $parameters = [
                'label' => '%'.$filters['q'].'%'
            ];
        }

        return $this->tdbmService->findObjects('roles', $sql, $parameters, $orderBy.' '.$direction);
    }
}
