<?php

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserDao class instead!
 */

namespace Mouf\Security\DAO;

use TheCodingMachine\TDBM\TDBMService;
use Mouf\Security\Password\Api\ForgotYourPasswordDao;
use Mouf\Security\Password\Exception\EmailNotFoundException;
use Mouf\Security\Password\Exception\TokenNotFoundException;
use Mouf\Security\UserManagement\Api\UserListDao;
use Mouf\Security\UserService\UserDaoInterface;
use Mouf\Security\UserService\UserInterface;
use Porpaginas\Result;

/**
 * This class provides a TDBM implementation of the UserDaoInterface.
 */
class SecurityUserDao implements UserDaoInterface, ForgotYourPasswordDao, UserListDao
{
    /**
     * @var TDBMService
     */
    protected $tdbmService;

    /**
     * Sets the TDBM service used by this DAO.
     *
     * @param TDBMService $tdbmService
     */
    public function __construct(TDBMService $tdbmService)
    {
        $this->tdbmService = $tdbmService;
    }

    /**
     * Returns a user from its login and its password, or null if the login or credentials are false.
     *
     * @param string $login
     * @param string $password
     *
     * @return UserInterface
     */
    public function getUserByCredentials($login, $password)
    {
        $user = $this->findOne(['login' => $login]);
        if ($user === null) {
            return;
        }

        if (password_verify($password, $user->getPassword())) {
            return $user;
        } else {
            return;
        }
    }

    /**
     * Returns a user from its token.
     *
     * @param string $token
     *
     * @return UserInterface
     */
    public function getUserByToken($token)
    {
        $user = $this->findOne(['token' => $token]);
        if ($user === null) {
            throw TokenNotFoundException::notFound($token);
        }

        return $user;
    }

    /**
     * Discards a token.
     *
     * @param string $token
     */
    public function discardToken($token)
    {
        $user = $this->getUserByToken($token);
        $user->setToken(null);
        $this->tdbmService->save($user);
    }

    /**
     * Returns a user from its ID.
     *
     * @param string $id
     *
     * @return UserInterface
     */
    public function getUserById($id)
    {
        return $this->tdbmService->findObjectByPk('users', ['id' => $id], [], false);
    }

    /**
     * Returns a user from its login.
     *
     * @param string $login
     *
     * @return UserInterface
     */
    public function getUserByLogin($login)
    {
        return $this->findOne(['login' => $login]);
    }

    /**
     * Get a single UserBean specified by its filters.
     *
     * @param mixed $filter     The filter bag (see TDBMService::findObjects for complete description)
     * @param array $parameters The parameters associated with the filter
     *
     * @return UserInterface|null
     */
    private function findOne($filter = null, array $parameters = [])
    {
        return $this->tdbmService->findObject('users', $filter, $parameters);
    }

    /**
     * Sets $token for user whose mail is $email, stores the token in database.
     * Throws an EmailNotFoundException if the email is not part of the database.
     *
     * @param string $email
     *
     * @throws \Mouf\Security\Password\Api\EmailNotFoundException
     */
    public function setToken(string $email, string $token)
    {
        $user = $this->findOne(['email' => $email]);

        if ($user === null) {
            throw EmailNotFoundException::notFound($email);
        }

        $user->setToken($token);

        $this->tdbmService->save($user);
    }

    /**
     * Sets the password matching to $token and discards $token.
     * Throws an TokenNotFoundException if the token is not part of the database.
     *
     * @param string $token
     * @param string $password
     *
     * @throws \Mouf\Security\Password\Api\TokenNotFoundException
     */
    public function setPasswordAndDiscardToken(string $token, string $password)
    {
        $user = $this->getUserByToken($token);
        $user->setPassword($password);
        $user->setToken(null);
        $this->tdbmService->save($user);
    }

    /**
     * Returns a list of users, as a Porpaginas result.
     * This list can be filtered based on the $filters array, that can be really anything based on the filters you implement.
     *
     * @param array $filters
     * @param $orderBy
     * @param $direction
     * @return Result
     */
    public function search(array $filters, $orderBy, $direction) : Result
    {
        $sql = null;
        $parameters = [];
        if (isset($filters['q'])) {
            $sql = 'login LIKE :login';
            $parameters = [
                'login' => '%'.$filters['q'].'%'
            ];
        }

        return $this->tdbmService->findObjects('users', $sql, $parameters);
    }
}
